# This guide will help you manage disks on your Ubuntu server.

# Update the server
# This lets the package manager see more packages than just the ones tracked out of the box.
sudo apt update

# If this is a fresh install it is best practice to also install the updates
# This will upgrade the packages to the current version.
sudo apt upgrade


#===========Claiming full drive===========

# Firstoff, if you are using ubuntu 20 or later you might find that your disk space has run out already.
# This is caused by Ubuntu using only 100GB of your hard drive when installing unless told otherwise.
# Lets check to see if this applies to you.
lsblk

# You should see ubuntu--vg-ubuntu--lv mounted as root '/' and containing only 100GB while the whole drive should have been used.
# If not then you are good here!
# If you see that Ubuntu did not use the whole drive you can extend the LVM by issueing this command.
sudo lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv

# Then resize the filesystem
sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv


#============Adding a new drive============

# You may have added some disks to your machine after you have already installed the OS and you need to add them to the machine.
# List the disks
lsblk

# You should see something like /dev/sdb or /dev/sdc at the bottom and see that on the right side they are not mounted.

# !!!!!!WARNING!!!!!!
# Always double check that your disk is not already used because these changes will erase data!
# Usually /dev/sda is the system drive and is where you have the OS installed so do not change this drive unless you know what you are doing!
# !!!!!!WARNING!!!!!!

# Now that that is out of the way I am going to show you how to prepare the disk to be mounted.
# I am going to use parted for this but be warned that parted writes changes immediately after hitting enter.

# Install parted.
sudo apt -y install parted

# Tell parted which drive you want to work on.
sudo parted /dev/sdb

# For this guide we are going to use GPT (GUID Partition Table) because it allows partitions over 2TB. 
# For lower than 2TB you could use LVM (Logical Volume Manager)
>mklabel gpt
>mkpart primary
>ext4
>0%
>100%

# In the previous step we told the system that the drive partition is intended for use with ext4 filesystem.
# But the next step actually applies that filesystem to the partition.
# The parted command also created a new partition. In this case sdb1.
# You can check again with lsblk

sudo mkfs.ext4 /dev/sdb1

# For NTFS and windows portable large drives see section marked windows compat.

# Now we need to create a mount point for the drive
sudo mkdir /mnt/mountpoint_name

# Mount it! :D
sudo mount /dev/sdb1 /mnt/mountpoint_name

# If you get an error like 
#"wrong fs type, bad option, bad superblock on /dev/sdb, missing codepage or helper program, or other error."
# then you likely used /dev/sdb instead of /dev/sdb(number)
# Try running it again with the partition number you get from lsblk



# Add the drive to /etc/fstab (file system table) so it is mounted at boot!
# Lets back it up first.
sudo cp /etc/fstab /etc/fstab.old

# Get the UUID
sudo blkid

#copy the UUID then edit /etc/fstab
sudo nano /etc/fstab

# Paste the UUID
UUID=your_coppied_UUID /mount/point ext4 defaults,nofail 0 2

# Save and exit. Ctrl + s then Ctrl + x

# unmount then automount so it is mounted by the system
sudo umount /mnt/mountpoint_name
sudo mount -a

# You might have permission issues when trying to use the drive so run the following
# commands to find your username and grand yourself permissions to the drive.
whoami

# whoami should return your username but you should also see it as "username@hostname:~$"
# Usernames should always be typed as all lowercase. I know, it bugs me too.

sudo chown -R "username" /mnt/mountpoint_name

#========windows compat=========
#ext4 is not compatable with windows so here I will show you a few options.
# FAT32 is kind of limited but has use in flash drives if you dont have files larger than 4GB.
# exFAT is incredible but does not do journaling and is more difficult to recover from if the drive is damaged.
# NTFS is easiest to recover if the drive is damaged and what you are most likely to see in windows
# but needs an extra package to be installed to work on Linux.


# Run this to create a partition then select one of the following options
parted -a optimal -s /dev/sdb mklabel gpt mkpart 'my_partition_name' 0% 100%

# Find the newly created partition
lsblk

#pick a filesystem listed below and continue with that filesystem's instructions


# FAT32 has a limit of 8TB for partitions and file size limit of 4GB

# Assuming the partition name is sdb1
# Why is it called vfat in this command? No clue.

# EDIT: vfat stands for virtual file allocation table and is an extension for FAT that relaxes the rules.
# You can read more here. https://stackoverflow.com/questions/11928982/what-is-the-difference-between-vfat-and-fat32-file-systems
# Its really interesting. I recomend it.
# Its worth noting that because of the MSDOS aliasing cutting the file name into 13 characters and creating new directory entries for each
# that if you use the max filename length for vFAT you can reach the limit of 512 entries in just 24 full length vFAT file names.
# (255/13)/512 = 24
# 255 vfat filename max
# 13 number of characters per directory entry that vFAT splits file names into.
# 512 max entries for root partition
# This seems to be talking about Microsoft specific root partition.

sudo mkfs.vfat /dev/sdb1

#===========exFAT===========

# Another option is exFAT (extended File Allocation Table) which has a theoretical partition size limit of 128 petabyte.
sudo apt install exfat-utils
sudo mkfs.exfat /dev/sdb1


#===========NTFS============

# If you want to use NTFS (New Technology File System) on linux use these commands to install support for it.
sudo apt install -y ntfs-3g-dev fuse

# Normally mkfs.ntfs performs "zeroing" as part of the formatting process in order to securely erase all prior data.
# It takes forever. To skip add the -Q flag for "quick".
sudo mkfs.ntfs -Q /dev/sdb1


/dev/sdb1 /mnt/win ntfs-3g defaults 0 0



